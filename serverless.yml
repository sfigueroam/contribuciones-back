service: tgr-contribuciones-back

custom:
  currentStage: ${opt:stage, 'dev'}
  environments:
    region: us-east-1
    bucket: ${opt:bucket-tokens}
    role: ${opt:role-arn}
    token:
      grantType: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/grant-type}
      clienteSecret: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/cliente-secret}
      clienteId: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/cliente-id}
      scope: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/scope}
    wsTierra:
      hostname: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/host}
      port: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/port}
    bucketParse: ${opt:bucket-parse}
    keyParse: ${ssm:/tgr/${self:custom.currentStage}/contribuciones/ws-tierra/key-parse}
    accessControlAllowOrigin: '*'
    cognito: arn:aws:cognito-idp:us-east-1:080540609156:userpool/us-east-1_YgUT9nLgh

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.environments.region}
  stage: ${self:custom.currentStage}
  role: ${self:custom.environments.role}
  apiGateway:
    restApiId: ${opt:rest-api-id}
    restApiRootResourceId: ${opt:rest-api-root-id}

package:
  exclude:
  - test/*
  - package-lock.json
  - package.json
  - tgr-parse-proxies-poc-dev/*

functions:

  proxyPrivate:
    handler: proxy-private.handler
    timeout: 30
    events:
    - http:
        path: proxy-private
        method: post
        cors: true
        authorizer:
          arn: ${self:custom.environments.cognito}
    - http:
        path: proxy-private
        method: get
        cors: true
        authorizer:
          arn: ${self:custom.environments.cognito}
    environment:
      wsHostname: ${self:custom.environments.wsTierra.hostname}
      wsPort: ${self:custom.environments.wsTierra.port}
      bucket: ${self:custom.environments.bucket}
      bucketParse: ${self:custom.environments.bucketParse}
      keyParse: ${self:custom.environments.keyParse}
      accessControlAllowOrigin: ${self:custom.environments.accessControlAllowOrigin}

  proxyPublic:
    handler: proxy-public.handler
    timeout: 30
    events:
    - http:
        path: proxy-public
        method: post
        cors: true
    - http:
        path: proxy-public
        method: get
        cors: true

    environment:
      wsHostname: ${self:custom.environments.wsTierra.hostname}
      wsPort: ${self:custom.environments.wsTierra.port}
      bucket: ${self:custom.environments.bucket}
      bucketParse: ${self:custom.environments.bucketParse}
      keyParse: ${self:custom.environments.keyParse}
      accessControlAllowOrigin: ${self:custom.environments.accessControlAllowOrigin}

  tokensRenew:
    handler: tokens-renew.handler

    events:
    - schedule: rate(4 minutes)

    environment:
      foo: bar
      wsHostname: ${self:custom.environments.wsTierra.hostname}
      wsPort: ${self:custom.environments.wsTierra.port}
      tokenGrantType: ${self:custom.environments.token.grantType}
      tokenClienteSecret: ${self:custom.environments.token.clienteSecret}
      tokenClienteId: ${self:custom.environments.token.clienteId}
      tokenScope: ${self:custom.environments.token.scope}
      bucket: ${self:custom.environments.bucket}
