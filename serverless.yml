# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tgr-proxies-tierra # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  currentStage: ${opt:stage, 'dev'}
  environments:
    dev:
      bucket: tgr-tokens-proxies-poc-dev
      region: us-east-1
      role: arn:aws:iam::080540609156:role/PatagoniaDevRole
      vpc:
        securityGroupIds:
          - sg-007f6a8ffb5d34924
        subnetIds:
          - subnet-0717e64b9df6a7701
          - subnet-060c756b0c118fa37
      token:
        grantType: client_credentials
        clienteSecret: TGR.passw0rd
        clienteId: OauthClientesDatosBasicosClient, OauthClientesCorreoClient, OauthTgrClientesCuentasClient, OauthTgrClientesDireccionClient, OauthClientesTelefonoClient, OauthBienRaizRolinClient, OauthRecuperaDeudaRolClient, OauthTgrSuscriptorWsClient, OauthTablasGeneralesRsClient, OauthRcPagosConsultasTgrClient
        scope: /tgrClientesWsDatosBasicos/api/datosbasicosws*, /tgrClientesWsCorreo/api/correosws*, /tgrClientesWsCuentas/api/cuentaws/*, /tgrClientesWsDireccion/api/direccionws/*, /tgrClientesWsTelefono/api/telefonows*, /ClienteBienRaizWS/api/BienRaiz* /BienRaizWS/api/BienRaiz*, /RecuperaDeudaROLRS/api/bienraiz/*, /tgrSuscriptorWs/api/suscriptor*, /tgrTablasGralesWs/api/tablasgrales/*, /recaPagoConsultasWS/api/pago/consulta
      wsTierra:
        hostname: wstest.tesoreria.cl
        port: 443
      bucketParse: tgr-parse-proxies-poc-dev
      keyParse: parse.json
      cognito: arn:aws:cognito-idp:us-east-1:080540609156:userpool/us-east-1_YgUT9nLgh
      #accessControlAllowOrigin: https://dl3ulmxmm6whg.cloudfront.net
      accessControlAllowOrigin: '*'

      #variables:tokensRenew:

    prod:
      region: us-east-2
#      variables:

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.environments.${self:custom.currentStage}.region}
  stage: ${self:custom.currentStage}
#  environment: ${self:custom.environments.${self:custom.currentStage}.variables}
  role: ${self:custom.environments.${self:custom.currentStage}.role}
  vpc: ${self:custom.environments.${self:custom.currentStage}.vpc}

package:
  exclude:
    - test/*
    - package-lock.json
    - package.json
    - tgr-parse-proxies-poc-dev/*
resources:
  Resources:
    PnrStorage:
      Type: AWS::S3::Bucket
      #DeletionPolicy: Retain
      #Condition: excludeBuckets
      Properties:
        BucketName: ${self:custom.environments.${self:custom.currentStage}.bucket}


functions:

  proxyPrivate:
    handler: proxy-private.handler
    timeout: 30
    events:
      - http:
          path: proxy-private
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.environments.${self:custom.currentStage}.cognito}
      - http:
          path: proxy-private
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.environments.${self:custom.currentStage}.cognito}
    environment:
      wsHostname: ${self:custom.environments.${self:custom.currentStage}.wsTierra.hostname}
      wsPort: ${self:custom.environments.${self:custom.currentStage}.wsTierra.port}
      bucket: ${self:custom.environments.${self:custom.currentStage}.bucket}
      bucketParse: ${self:custom.environments.${self:custom.currentStage}.bucketParse}
      keyParse: ${self:custom.environments.${self:custom.currentStage}.keyParse}
      accessControlAllowOrigin: ${self:custom.environments.${self:custom.currentStage}.accessControlAllowOrigin}

  proxyPublic:
    handler: proxy-public.handler
    timeout: 30
    events:
      - http:
          path: proxy-public
          method: post
          cors: true
      - http:
          path: proxy-public
          method: get
          cors: true

    environment:
      wsHostname: ${self:custom.environments.${self:custom.currentStage}.wsTierra.hostname}
      wsPort: ${self:custom.environments.${self:custom.currentStage}.wsTierra.port}
      bucket: ${self:custom.environments.${self:custom.currentStage}.bucket}
      bucketParse: ${self:custom.environments.${self:custom.currentStage}.bucketParse}
      keyParse: ${self:custom.environments.${self:custom.currentStage}.keyParse}
      accessControlAllowOrigin: ${self:custom.environments.${self:custom.currentStage}.accessControlAllowOrigin}


  tokensRenew:
    handler: tokens-renew.handler


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - schedule: rate(4 minutes)
        #enabled: false

    environment:
      foo: bar
      tokenGrantType: ${self:custom.environments.${self:custom.currentStage}.token.grantType}
      tokenClienteSecret: ${self:custom.environments.${self:custom.currentStage}.token.clienteSecret}
      tokenClienteId: ${self:custom.environments.${self:custom.currentStage}.token.clienteId}
      tokenScope: ${self:custom.environments.${self:custom.currentStage}.token.scope}
      bucket: ${self:custom.environments.${self:custom.currentStage}.bucket}


