# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tgr-proxies-tierra # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  currentStage: ${opt:stage, 'dev'}
  environments:
    dev:
      bucket: tgr-tokens-proxies-poc-dev
      region: us-east-1
      role: arn:aws:iam::080540609156:role/PatagoniaDevRole
      vpc:
        securityGroupIds:
          - sg-007f6a8ffb5d34924
        subnetIds:
          - subnet-0717e64b9df6a7701
          - subnet-060c756b0c118fa37
      token:
        grantType: client_credentials
        clienteSecret: TGR.passw0rd
        clienteId: OauthClientesDatosBasicosClient, OauthClientesCorreoClient, OauthTgrClientesCuentasClient, OauthTgrClientesDireccionClient, OauthClientesTelefonoClient, OauthBienRaizRolinClient, OauthRecuperaDeudaRolClient, OauthTgrSuscriptorWsClient, OauthTablasGeneralesRsClient
        scope: /tgrClientesWsDatosBasicos/api/datosbasicosws*, /tgrClientesWsCorreo/api/correosws*, /tgrClientesWsCuentas/api/cuentaws/*, /tgrClientesWsDireccion/api/direccionws/*, /tgrClientesWsTelefono/api/telefonows*, /ClienteBienRaizWS/api/BienRaiz* /BienRaizWS/api/BienRaiz*, /RecuperaDeudaROLRS/api/bienraiz/*, /tgrSuscriptorWs/api/suscriptor*, /tgrTablasGralesWs/api/tablasgrales/*
      wsTierra:
        hostname: wstest.tesoreria.cl
        port: 443
      bucketParse: tgr-parse-proxies-poc-dev
      keyParse: parse.json
      #variables:tokensRenew:

    prod:
      region: us-east-2
#      variables:

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.environments.${self:custom.currentStage}.region}
  stage: ${self:custom.currentStage}
#  environment: ${self:custom.environments.${self:custom.currentStage}.variables}
  role: ${self:custom.environments.${self:custom.currentStage}.role}
  vpc: ${self:custom.environments.${self:custom.currentStage}.vpc}

package:
  exclude:
    - test/*
    - package-lock.json
    - package.json
    - tgr-parse-proxies-poc-dev/*


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

resources:
  Resources:
    PnrStorage:
      Type: AWS::S3::Bucket
      #DeletionPolicy: Retain
      #Condition: excludeBuckets
      Properties:
        BucketName: ${self:custom.environments.${self:custom.currentStage}.bucket}


functions:

  proxyPrivate:
    handler: proxy-private.handler
    timeout: 30
    events:
      - http:
          path: proxy-private
          method: post
          cors: true
      - http:
          path: proxy-private
          method: get
          cors: true
    environment:
      wsHostname: ${self:custom.environments.${self:custom.currentStage}.wsTierra.hostname}
      wsPort: ${self:custom.environments.${self:custom.currentStage}.wsTierra.port}
      bucket: ${self:custom.environments.${self:custom.currentStage}.bucket}
      bucketParse: ${self:custom.environments.${self:custom.currentStage}.bucketParse}
      keyParse: ${self:custom.environments.${self:custom.currentStage}.keyParse}

  proxyPublic:
    handler: proxy-public.handler
    timeout: 30
    events:
      - http:
          path: proxy-public
          method: post
          cors: true
      - http:
          path: proxy-public
          method: get
          cors: true

    environment:
      wsHostname: ${self:custom.environments.${self:custom.currentStage}.wsTierra.hostname}
      wsPort: ${self:custom.environments.${self:custom.currentStage}.wsTierra.port}
      bucket: ${self:custom.environments.${self:custom.currentStage}.bucket}
      bucketParse: ${self:custom.environments.${self:custom.currentStage}.bucketParse}
      keyParse: ${self:custom.environments.${self:custom.currentStage}.keyParse}


  tokensRenew:
    handler: tokens-renew.handler


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - schedule: rate(4 minutes)
        #enabled: false

#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}

#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
    environment:
      foo: bar
      tokenGrantType: ${self:custom.environments.${self:custom.currentStage}.token.grantType}
      tokenClienteSecret: ${self:custom.environments.${self:custom.currentStage}.token.clienteSecret}
      tokenClienteId: ${self:custom.environments.${self:custom.currentStage}.token.clienteId}
      tokenScope: ${self:custom.environments.${self:custom.currentStage}.token.scope}
      bucket: ${self:custom.environments.${self:custom.currentStage}.bucket}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
